local button = require "in.button"

local function load_example(self, proxy)
	gui.set_enabled(gui.get_node("buttons"), false)
	gui.set_enabled(gui.get_node("back/button"), true)
	msg.post(proxy, "async_load")
	self.example = proxy
end

local function unload_example(self)
	gui.set_enabled(gui.get_node("buttons"), true)
	gui.set_enabled(gui.get_node("back/button"), false)
	msg.post(self.example, "unload")
	self.example = nil
end

function init(self)
	button.acquire()

	gui.set_enabled(gui.get_node("back/button"), false)
	
	button.register("back/button", function()
		unload_example(self)
	end)

	local examples = {
		"bezier", "broadcast", "dynamic", "flow", "kinematic", "listener",
		"platformer", "ray_cast", "savefile", "savetable", "logger"
	}

	for _,example in ipairs(examples) do
		button.register(example .. "/button", function()
			load_example(self, "#" .. example .. "proxy")
		end)
	end
end

function final(self)
	button.release()
	button.unregister()
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "enable")
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
