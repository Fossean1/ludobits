local input = require "ludobits.m.input.state"
local mapper = require "ludobits.m.input.mapper"
local kinematic = require "ludobits.m.physics.kinematic"

local UP = hash("up")
local DOWN = hash("down")
local LEFT = hash("left")
local RIGHT = hash("right")

local WIDTH = 1280
local HEIGHT = 720

function init(self)
	input.acquire()
	mapper.bind(mapper.KEY_LEFT, LEFT)
	mapper.bind(mapper.KEY_RIGHT, RIGHT)
	mapper.bind(mapper.KEY_UP, UP)
	mapper.bind(mapper.KEY_DOWN, DOWN)
	mapper.bind(mapper.KEY_A, LEFT)
	mapper.bind(mapper.KEY_D, RIGHT)
	mapper.bind(mapper.KEY_W, UP)
	mapper.bind(mapper.KEY_S, DOWN)
	self.k = kinematic.create()
end

function final(self)
	input.release()
end

function update(self, dt)
	self.k.update(dt)
	if input.is_pressed(UP) then
		self.k.forward(200 * dt)
	elseif input.is_pressed(DOWN) then
		self.k.backwards(100 * dt)
	end
	if input.is_pressed(LEFT) then
		self.k.rotate(math.rad(150 * dt))
	elseif input.is_pressed(RIGHT) then
		self.k.rotate(math.rad(-150 * dt))
	end
end

function on_message(self, message_id, message, sender)
	self.k.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	action_id = mapper.on_input(action_id)
	input.on_input(action_id, action)
	
	if not action_id then
		local mouse = vmath.vector3(action.screen_x, action.screen_y, 0)
		go.set_position(mouse, "mouse")
		self.k.look_at(mouse)
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
